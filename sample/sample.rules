;; rules for sample.xml in the same dir.

(use sxml.sxpath)
(use sxml.tools)
(use text.tree)
(use xmltex.cnvr)
(use xmltex.latex)

(define xml-entities
  (list
   '(amp  . "&")
   '(ouml . "\\\"o")
   '(lt   . "<")
   '(gt   . ">")
   ))

(define-tag book
  (define-rule
    '("\\documentclass{jsbook}\n"
      "\\usepackage{graphicx}"
      "\\usepackage{alltt}"
      "\\begin{document}\n"
      )
    list
    "\\end{document}"))

(define-simple-rules through
  *TOP* foreward preface sect1 intermission chapter)

(define-simple-rules ignore
  *PI*)

(define-simple-rules make-latex-cmd-without-tex-escape
  frontmatter mainmatter backmatter tableofcontents printindex)

(define-simple-rules make-latex-cmd
  footnote emph textit texttt text textbf)

(define (make-text-cmd name)
  (define-rule
    (lambda ()
      (list "\\text" name "{"))
    (lambda (str)
      (list (without-white (kick-comment str))))
    (lambda () (list "}"))))

(define-simple-rules make-text-cmd
  tt it)

(define-simple-rules make-latex-env
  myquote biblio)

(define-simple-rules make-latex-cmd-without-tex-escape
  eq)

(define-tag p
  (when-lang 
    "ja" (define-rule "" trim "\n\n")
    "en" (define-rule "{\\small" trim "}\n\n")
    else (ignore)))

(define-tag title
  (define-rule
    (lambda ()
      (list
       (cond ((eq? ($parent) 'foreward) "\\chapter*{")
	     ((eq? ($parent) 'preface)  "\\chapter*{")
	     ((eq? ($parent) 'chapter)  "\\chapter{")
	     ((eq? ($parent) 'sect1)    "\\section{")
	     ((eq? ($parent) 'sect2)    "\\subsection{")
	     ((eq? ($parent) 'sect3)    "\\subsubsection*{")
             ((eq? ($parent) 'section)
              (let1 depth ($ancestors '(section))
                (cond ((null? depth) (display "Floating Section\n" (standard-error-port)))
                      ((= (length depth) 1) "\\section{")
                      ((= (length depth) 2) "\\subsection{")
                      ((= (length depth) 3) "\\subsubsection{")
                      (else "{"))))
	     (else (error "title" $parent)))))
    trim
    "}"))

(define-tag image
  (define-rule
    (lambda ()
      (receive (src width)
          (values (format #f "{~a}" (ifstr ($@ 'src)))
                  (format #f "[width=~a]" (ifstr ($@ 'width) else "100truemm")))
        (list "\\begin{figure}\n"
              "\\includegraphics" width src)))
    trim
    "\\end{figure}"))

(define-tag code
  (define-rule
	(lambda () 
	  (list #`"\\begin{alltt}"))
	kick-comment
	(lambda () 
	  (list "\\end{alltt}"))))
