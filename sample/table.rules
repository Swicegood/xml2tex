;; When converting html tables to latex longtables, you need to 
;;  - extract colspec from tr elems having th elems and/or most td elems, 
;;  - specify last td elems to avoid last &, and
;;  - negate multirows to avoid overdrawing.

(use sxml.sxpath)
(use sxml.tools)
(use xmltex.latex)
(use xmltex.latextable)
(use text.tree)
(use srfi-13)
(use util.list)

(define-tag body
  (define-rule 
    (list
     (usepackage "lucidabr")
     (usepackage "xcolor" "table")
     (usepackage "multirow")
     (usepackage "graphicx")
     (usepackage "calc")
     (usepackage "alltt")
     (usepackage "url")
     "\\begin{document}")
    trim
    "\\end{document}"))

(define-tag table
  (define-rule
    (lambda ()
      (list #`"\\begin{tabular}{|,($@ 'colspec)|}\n"))
    trim
    "\\end{tabular}"
    :pre
    (lambda (body root)
      (let* ((trs ((node-closure (ntype-names?? '(tr))) body))
	     (tds (map (node-closure (ntype-names?? '(td th))) trs))
	     (tr-attrs (map sxml:attr-as-list trs))
	     (colspec (make-colspec tds)))
	(sxml:set-attr
	 (cons (sxml:name body)
	       (append 
		(sxml:attr-as-list body)
		(sxml:aux-as-list body)
		(transform-trs tds tr-attrs)
		(sxml:content
		 (filter (sxml:invert (ntype-names?? '(tr))) body))))
	 (list 'colspec colspec))))
    ))

(define (transform-trs tds tr-attrs)
  (define (make-content name attr cont)
    (cons name (append attr cont)))
  (map 
   (lambda (tr-attr tr)
     (cons
      'tr 
      (append tr-attr tr)))
   tr-attrs
   ((compose set-col-width tr-last-td negate-multirow) tds)))

(define-tag tr
  (define-rule
    ""
    trim
    (lambda ()
      (let ((terminator (if (null? ($child 'th)) "" "\\hline"))
            (underline  (cline ($@ 'cline))))
        #`"\\\\,|underline|,|terminator|\n"))
    :pre
      (lambda (body root)
        (cons (sxml:name body)
              (append (sxml:attr-as-list body)
                      (sxml:aux-as-list body)
                      (map (cut set-row-align-to-col body <>) ((node-closure (ntype-names?? '(td th))) body))
                      (sxml:content
                        (filter (sxml:invert (ntype-names?? '(td th tr))) body)))))))

(define (set-row-align-to-col row col)
  (let1 rowalign (sxml:attr-u row 'align)
    (if rowalign (sxml:add-attr col `(align ,rowalign)) col)))

(define-tag th (make-td 'th))
(define-tag td (make-td 'td))

